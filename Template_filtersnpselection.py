### Strain selection process ###

import numpy as np
import pandas as pd

### Set folder path #
folder = "home/user/Documents/GBS_typeIV/REF"
global counter = 0
def savebackup(file):
    global counter +=1
    """Saves a backupfile of the progress in case of Errors or backtracking purposes.
    Args:
      file (obj) : obj to be saved (for this program dataframes to csv files).
    """
    pd.to_csv('temp_'+str(counter)+'.csv')
### Import data file #
alldata = pd.read_csv(folder+'FILE.csv', index_col='POS')
colnames = alldata.columns
annotations = ['ID','I','GN','CDNA','CDS']
cols = annotations

### Subset the data into samples we have access to, removing CDC or other sources
samplesubset = [name for name in colnames if name.find('BCJB') != -1]
cols.extend(samplesubset)
data = alldata[cols]
# Create a dictionary with different impact dataframes
data_imp = {g: d for g,d in data.groupby('GN')}

### FILTER high dataframe to only maintain selected strains # MOST RECENT METHOD DONE TO GET 459 SAMPLES TO DR.FLORES ******************
transposed = data_imp['HIGH'].transpose()
transposed['snpcount'] = data_imp['HIGH'].count()
high = transposed.replace(0,np.nan,inplace=True).transpose()
high['isolatecount'] = transposed.count()
high.dropna(how='all',inplace=True)
dropcols = list()
# select snp rows that appear in over 85% of isolates for removal from consideration
#NEEDED??? [droprows.append(temp.columns[n]) for n in range(len(high)) if temp.iloc[-1,n] < high['count'].max()-(len(temp)/15)]
# select isolate columns with over 2% snp count from minimal snp count for removal from consideration
[dropcols.append(high.columns[n]) for n in range(len(transposed)) if high.iloc[-1,n] > transposed['snpcount'].min()+1]
highfiltered = high.drop(dropcols,axis=1).drop('isolatecount',axis=1)
highfiltered.dropna(how='all',inplace=True)
keeprows = highfiltered.index
keepcols = annotations
keepcols.extend(highfiltered.columns)
save = alldata.query("index in @keeprows")
save[keepcols].to_csv('filteredHIGH.csv')

def imp_df_counts(dfdic, impact=['HIGH','MODERATE','LOW','MODIFIER']):
    """Creates a new dataframe according to the impact profile of snps
    Args:
      dfdic (df dict) : dictionary of {impact:dataframes}
      impact (str) : label of impact category
    Returns:
      newdf DataFrame containing only the selected impact category"""
    dfdic[impact]
    temp = dfdic[impact].transpose()
    temp['tcount'] = dfdic[impact].count()
    newdf = temp.transpose()
    newdf['count'] = temp.count()
    return newdf
  # FILTER snps rows to only maintain out of suspected PHAGE element snps #
def filterdf(df, perc=0.8, snpsadditional=1):
    """Filters a dataframe to select strains with the fewest number of snps
    Args:
      df (DataFrame) : Dataframe including counts [default use df generated by imp_df_counts()]
      perc (float) : Float representation of the percentage coverage to be considered representative to the population (default 80%).
      snpsadditional (int) : Number of snps in addition to the representative snps to be considered (default 2).
    Returns:
      filtered : DataFrame containing only the selected rows (non 0 or common to at least [default=80]% of strains) and columns (selected strains)
      for the filtered view."""
    dftrans = df.transpose()
    dropcols = list()
    droprows = list()
    [droprows.append(dftrans.columns[n]) for n in range(len(df)) if dftrans.iloc[-1,n] < df['count'].max()-(len(dftrans)*(1-perc))]
    # select isolate columns with over 2% snp count from minimal snp count for removal from consideration
    snpstotal = dftrans['tcount'].replace(0,np.nan).min()+snpsadditional
    [dropcols.append(df.columns[n]) for n in range(len(dftrans)) if df.iloc[-1,n] > dftrans['tcount'].min()+snpstotal)]
    filtered = copy(df)
    filtered.drop(dropcols,axis=1,inplace=True)
    filtered.drop(droprows,axis=0,inplace=True)
    return filtered

high = filterdf(imp_df_counts(data_imp,'HIGH'), perc=0.8,snpsadditional=2)
moderate = filterdf(imp_df_counts(data_imp,'MODERATE'), perc=0.9,snpsadditional=100)

    #access PHASTER.ca to obtain... OR from created file to build trees...


# FILTER mid dataframe to select certain strains #
data_imp['MODERATE']
